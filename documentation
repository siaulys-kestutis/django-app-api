DJANGO:
Object relational mapper (ORM): convert objects to database rows

DJANGO ADMIN:
- Out-of-the-box admin site
- Manage models
- Visualise database

DJANGO REST FRAMEWORK:
- Extension to Django
- Built in authentication system (easy to add to the API endpoints)
- Viewsets: create the structure of the API / provide all the necessary endpoints for managing objects
- Serializers:
i) validation of all the requests to the API
ii) to convert Json objects to Django database models
iii) Browsable API (useful for testing the endpoints in the browser)

DOCKER:
- Virtualisation tool
- Isolate project dependencies from the machine it is running on
- Lightweight virtual machine
- Will wrap the project and all of its dependencies into a single Docker image - that can be run independently on any machine
- Consistent dev environment
- Could use the image for the deployment to the cloud platform (i.e. AWS)

TRAVIS_CI:
- Automate testing and linting
- Integrates well with GitHub
- Can configure to run automatically every time changes are made to the code

PodygreSQL:
- A production database
- Easy to set up with Docker

TDD:
- Isolates the specific code to be tested:
i) Functions
ii) Class
iii) API endpoints

Test stages:
1) Setup -> create sample DB objects
2) Execution -> call the code
3) Assertions -> confirm the correctes of the asserted output

In TDD:
write the tests for expected behaviour (and make sure it fails) -> implement the code to make the test pass (this ensures that the original test did NOT have bugs in it itself)
This:
i) Increases test coverage
ii) Ensures that tests work

========================================================================
DOCKER:
DOCKER_COMPOSE: tool that allows to run our Docker image easily from our project location
- docker build . : builds the docker image according to the DOCKERFILE
- docker-compose build: does so according to the docker-compose.yml file
- docker-compose up: this basically creates and starts the containers

- docker-compose run app sh -c "command":
this runs the particular command specified in the parentheses, i.e.
docker-compose run app sh -c "django-admin.py startproject app ."

this would create the Django project

TRAVIS CI:
Travis CI configuration file: tells what Travis-CI should do every time we push
a change to a project

DJANGO UNIT TESTS:
Django unit test framework looks for any files that begin with
tests and basically uses them as tests when you run
Django run unit test command
(i.e. the class or folder must begin with the word test)

All the test functions must begin with 'test' in their name

Running the tests in this case is done:
docker-compose run app sh -c "python manage.py test"

Running the tests and linting is done:
docker-compose run app sh -c "python manage.py test && flake8"

CREATING THE CUSTOM USER MODEL:
Creating the core app (the command in the "" is exactly the same as before)
docker-compose run app sh -c "python manage.py startapp core"


MOCKING:
- Change the behaviour of the dependencies of the code one is testing
- Avoids unintended side-effects
- Also, never write tests that depend on external services

